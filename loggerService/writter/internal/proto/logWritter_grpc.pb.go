// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogWritterClient is the client API for LogWritter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogWritterClient interface {
	SaveLog(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type logWritterClient struct {
	cc grpc.ClientConnInterface
}

func NewLogWritterClient(cc grpc.ClientConnInterface) LogWritterClient {
	return &logWritterClient{cc}
}

func (c *logWritterClient) SaveLog(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logWritter.LogWritter/SaveLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogWritterServer is the server API for LogWritter service.
// All implementations must embed UnimplementedLogWritterServer
// for forward compatibility
type LogWritterServer interface {
	SaveLog(context.Context, *LogData) (*emptypb.Empty, error)
	mustEmbedUnimplementedLogWritterServer()
}

// UnimplementedLogWritterServer must be embedded to have forward compatible implementations.
type UnimplementedLogWritterServer struct {
}

func (UnimplementedLogWritterServer) SaveLog(context.Context, *LogData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLog not implemented")
}
func (UnimplementedLogWritterServer) mustEmbedUnimplementedLogWritterServer() {}

// UnsafeLogWritterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogWritterServer will
// result in compilation errors.
type UnsafeLogWritterServer interface {
	mustEmbedUnimplementedLogWritterServer()
}

func RegisterLogWritterServer(s grpc.ServiceRegistrar, srv LogWritterServer) {
	s.RegisterService(&LogWritter_ServiceDesc, srv)
}

func _LogWritter_SaveLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogWritterServer).SaveLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logWritter.LogWritter/SaveLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogWritterServer).SaveLog(ctx, req.(*LogData))
	}
	return interceptor(ctx, in, info, handler)
}

// LogWritter_ServiceDesc is the grpc.ServiceDesc for LogWritter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogWritter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logWritter.LogWritter",
	HandlerType: (*LogWritterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveLog",
			Handler:    _LogWritter_SaveLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loggerService/writter/internal/proto/logWritter.proto",
}
